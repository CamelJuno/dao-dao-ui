/* tslint:disable */
import { Binary, Expiration, Uint128 } from './shared-types'

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Cw20ExecuteMsg =
  | {
      transfer: {
        amount: Uint128
        recipient: string
        [k: string]: unknown
      }
    }
  | {
      burn: {
        amount: Uint128
        [k: string]: unknown
      }
    }
  | {
      send: {
        amount: Uint128
        contract: string
        msg: Binary
        [k: string]: unknown
      }
    }
  | {
      increase_allowance: {
        amount: Uint128
        expires?: Expiration | null
        spender: string
        [k: string]: unknown
      }
    }
  | {
      decrease_allowance: {
        amount: Uint128
        expires?: Expiration | null
        spender: string
        [k: string]: unknown
      }
    }
  | {
      transfer_from: {
        amount: Uint128
        owner: string
        recipient: string
        [k: string]: unknown
      }
    }
  | {
      send_from: {
        amount: Uint128
        contract: string
        msg: Binary
        owner: string
        [k: string]: unknown
      }
    }
  | {
      burn_from: {
        amount: Uint128
        owner: string
        [k: string]: unknown
      }
    }
  | {
      mint: {
        amount: Uint128
        recipient: string
        [k: string]: unknown
      }
    }
  | {
      update_marketing: {
        /**
         * A longer description of the token and it's utility. Designed for tooltips or such
         */
        description?: string | null
        /**
         * The address (if any) who can update this data structure
         */
        marketing?: string | null
        /**
         * A URL pointing to the project behind this token.
         */
        project?: string | null
        [k: string]: unknown
      }
    }
  | {
      upload_logo: Logo
    }
/**
 * This is used for uploading logo data, or setting it in InstantiateData
 */
export type Logo =
  | {
      url: string
    }
  | {
      embedded: EmbeddedLogo
    }
/**
 * This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.
 */
export type EmbeddedLogo =
  | {
      svg: Binary
    }
  | {
      png: Binary
    }
